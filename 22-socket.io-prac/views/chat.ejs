<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>socket.id</title>
    <!-- cdn -->
    <script src="/socket.io/socket.io.js"></script>
    <style>
        .chat_list {
            background-color: skyblue;
            width: 50%;
            height: 500px;
            padding: 10px;
            overflow-y: auto;
        }

        .chat_list div {
            margin-top: 3px;
        }

        .chat_list div div {
            display: inline;
            padding: 3px;
        }

        .my_chat {
            text-align: right;
        }

        .other_chat {
            text-align: left;
        }

        .my_chat div {
            background-color: yellow;
        }

        .other_chat div {
            background-color: white;
        }

        .notice {
            text-align: center;
            color: #005397;
            font-size: 12px;
        }

        .d_none {
            display: none;
        }

        .secret_chat div {
            background-color: pink;
        }
    </style>
</head>

<body>
    <h1>My Chat</h1>
    <input type="text" id="username" placeholder="username">
    <button type="button" class="join_btn" onclick="join()">입장</button>
    <button type="button" class="d_none disconnect_btn" onclick="disconnect()">퇴장</button>
    <main class="chat_box d_none">
        <div class="chat_list">
            <!-- 임시 대화 데이터 -->
            <!-- <div class="my_chat">
                <div>user1 : msg1</div>
            </div>
            <div class="other_chat">
                <div>user2 : msg2</div>
            </div> -->
        </div>

        <select name="user_list" id="user_list"></select>에게
        <input type="text" id="message" onkeydown="if(window.event.keyCode == 13){send()}">
        <button type="button" onclick="send()">전송</button>
    </main>

    <script>
        // 소켓 사용을 위한 객체 생성
        const socket = io.connect()
        let userName = ''

        socket.on('connect', () => {
            console.log('클라이언트 연결 완료 >', socket.id);
        })
        socket.on('notice', (msg) => {
            document.querySelector('.chat_list').insertAdjacentHTML('beforeend', `<div class='notice'>${msg}</div>`);
        })
        // 채팅 전송
        function send() {
            const data = {
                username: userName,
                dm: document.getElementById('user_list').value,
                id: socket.id,
                msg: document.getElementById('message').value
            }
            socket.emit('send', data)
            document.getElementById('message').value = ''
        }
        socket.on('newMessage', (data) => {
            const chatList = document.querySelector('.chat_list')
            const div = document.createElement('div')
            const divChat = document.createElement('div')
            const divName = document.createElement('div')

            console.log(data.id);
            console.log(socket.id);
            if (data.id === socket.id) {
                div.classList.add('my_chat')
                divName.classList.add('my_chat')
            } else {
                div.classList.add('other_chat')
                divName.classList.add('other_chat')
            }
            // dm 여부 확인
            if (data.dm) {
                div.classList.add('secret_chat')
                divChat.textContent = data.dm //'(속닥속닥) '
            }
            divName.textContent = `${data.username}`
            chatList.append(divName)

            divChat.textContent += `${data.msg}`
            div.append(divChat)
            chatList.append(div)

            chatList.scrollTop = chatList.scrollHeight
        })

        function join() {
            socket.emit('setUserList', {
                username: document.getElementById('username').value,
                id: socket.id
            })
            userName = document.getElementById('username').value
        }

        socket.on("entryFailed", (msg) => {
            alert(msg)
        })
        socket.on("entrySuccess", (entrySuccess) => {
            document.querySelector('.join_btn').disabled = true
            document.querySelector('#username').disable = true
            document.querySelector('.chat_box').classList.remove('d_none')
            document.querySelector('.disconnect_btn').classList.remove('d_none')
        })
        socket.on("updateUsers", (users) => {
            console.log('userList >', users);

            let options = `<option value="all">전체</option>`
            for (let key in users) {
                if (key !== userName) {
                    options += `<option value=${key} id=${key}>${key}</option>`
                }
            }
            document.querySelector("#user_list").innerHTML = options
        })


        function disconnect() {
            socket.emit("deletename", userName)
            socket.disconnect();
            alert('퇴장되었습니다.');
            document.location.href = '/main'
        }
        socket.on("deleteuser", (username) => {
            const deleteOpt = document.getElementById(username)
            deleteOpt.remove()
        })

    </script>
</body>

</html>